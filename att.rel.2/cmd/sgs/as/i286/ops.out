#/*   @(#)ops.out	1.2 - 85/07/08 */
/*	modified March 84 to add 186 instructions;	jws */
{"xlat",	INSTRW,	NO_OP-256,	8,	0xd7L},
{"lahf",	INSTRW,	NO_OP-256,	8,	0x9fL},
{"sahf",	INSTRW,	NO_OP-256,	8,	0x9eL},
{"pushf",	INSTRW,	NO_OP-256,	8,	0x9cL},
{"popf",	INSTRW,	NO_OP-256,	8,	0x9dL},
{"aaa",		INSTRW,	NO_OP-256,	8,	0x37L},
{"daa",		INSTRW,	NO_OP-256,	8,	0x27L},
{"aas",		INSTRW,	NO_OP-256,	8,	0x3fL},
{"aam",		INSTRW,	NO_OP-256,	16,	0xd40aL},
{"das",		INSTRW,	NO_OP-256,	8,	0x2fL},
{"aad",		INSTRW,	NO_OP-256,	16,	0xd50aL},
{"cbw",		INSTRW,	NO_OP-256,	8,	0x98L},
{"cwd",		INSTRW,	NO_OP-256,	8,	0x99L},
{"rep",		INSTRW,	NO_OP-256,	8,	0xf3L},
{"repz",	INSTRW,	NO_OP-256,	8,	0xf3L},
{"repnz",	INSTRW,	NO_OP-256,	8,	0xf2L},
{"slodb",	INSTRB,	BSLOD-256,	8,	0xacL},
{"slod",	INSTRW,	SLOD-256,	8,	0xadL},
{"smovb",	INSTRB,	STROP1-256,	8,	0xa4L},
{"smov",	INSTRW,	STROP1-256,	8,	0xa5L},
{"scmpb",	INSTRB,	STROP1-256,	8,	0xa6L},
{"scmp",	INSTRW,	STROP1-256,	8,	0xa7L},
{"scab",	INSTRB,	BSTROP2-256,	8,	0xaeL},
{"sca",		INSTRW,	STROP2-256,	8,	0xafL},
{"sstob",	INSTRB,	BSTROP2-256,	8,	0xaaL},
{"ssto",	INSTRW,	STROP2-256,	8,	0xabL},
{"ret",		INSTRW,	RETOP-256,	8,	0xc3L},
{"lret",	INSTRW,	RETOP-256,	8,	0xcbL},
{"into",	INSTRW,	NO_OP-256,	8,	0xceL},
{"iret",	INSTRW,	NO_OP-256,	8,	0xcfL},
{"clc",		INSTRW,	NO_OP-256,	8,	0xf8L},
{"cmc",		INSTRW,	NO_OP-256,	8,	0xf5L},
{"stc",		INSTRW,	NO_OP-256,	8,	0xf9L},
{"cld",		INSTRW,	NO_OP-256,	8,	0xfcL},
{"std",		INSTRW,	NO_OP-256,	8,	0xfdL},
{"cli",		INSTRW,	NO_OP-256,	8,	0xfaL},
{"sti",		INSTRW,	NO_OP-256,	8,	0xfbL},
{"hlt",		INSTRW,	NO_OP-256,	8,	0xf4L},
{"wait",	INSTRW,	NO_OP-256,	8,	0x9bL},
{"lock",	INSTRW,	NO_OP-256,	8,	0xf0L},
{"int",		INSTRW,	EXPOP1-256,	8,	0xcdL},
{"inb",		INSTRB,	EXPOP2-256,	8,	0xecL},
{"in",		INSTRW,	EXPOP2-256,	8,	0xedL},
{"outb",	INSTRB,	EXPOP2-256,	8,	0xeeL},
{"out",		INSTRW,	EXPOP2-256,	8,	0xefL},
{"push",	INSTRW,	SPOP1-256,	16,	0xff30L},
{"pushR",	RINST,	SPOPT-256,	8,	0x50L},
{"pushS",	SINST,	SPOPT-256,	8,	0x06L},
{"pop",		INSTRW,	SPOP1-256,	16,	0x8f00L},
{"popR",	RINST,	SPOPT-256,	8,	0x58L},
{"popS",	SINST,	SPOPT-256,	8,	0x07L},
{"xchgA",	AINST,	XCHGOPT-256,	8,	0x90L},
{"inbE",	EINST,	EXPOPT-256,	8,	0xe4L},
{"inE",		EINST,	EXPOPT-256,	8,	0xe5L},
{"outbE",	EINST,	EXPOPT-256,	8,	0xe6L},
{"outE",	EINST,	EXPOPT-256,	8,	0xe7L},
{"addbIA",	IAINST,	DYADOPT-256,	8,	0x04L},
{"addIA",	IAINST,	DYADOPT-256,	8,	0x05L},
{"adcbIA",	IAINST,	DYADOPT-256,	8,	0x14L},
{"adcIA",	IAINST,	DYADOPT-256,	8,	0x15L},
{"subbIA",	IAINST,	DYADOPT-256,	8,	0x2cL},
{"subIA",	IAINST,	DYADOPT-256,	8,	0x2dL},
{"sbbbIA",	IAINST,	DYADOPT-256,	8,	0x1cL},
{"sbbIA",	IAINST,	DYADOPT-256,	8,	0x1dL},
{"andbIA",	IAINST,	DYADOPT-256,	8,	0x24L},
{"andIA",	IAINST,	DYADOPT-256,	8,	0x25L},
{"cmpbIA",	IAINST,	DYADOPT-256,	8,	0x3cL},
{"cmpIA",	IAINST,	DYADOPT-256,	8,	0x3dL},
{"testbIA",	IAINST,	DYADOPT-256,	8,	0xa8L},
{"testIA",	IAINST,	DYADOPT-256,	8,	0xa9L},
{"orbIA",	IAINST,	DYADOPT-256,	8,	0x0cL},
{"orIA",	IAINST,	DYADOPT-256,	8,	0x0dL},
{"xorbIA",	IAINST,	DYADOPT-256,	8,	0x34L},
{"xorIA",	IAINST,	DYADOPT-256,	8,	0x35L},
{"clrb",	INSTRB,	BCLR-256,	0,	0x0L},
{"clr",		INSTRW,	CLR-256,	0,	0x0L},
{"incb",	INSTRB,	BINCDEC-256,	16,	0xfe00L},
{"inc",		INSTRW,	INCDEC-256,	16,	0xff00L},
{"incR",	RINST,	INCOPT-256,	8,	0x40L},
{"decb",	INSTRB,	BINCDEC-256,	16,	0xfe08L},
{"dec",		INSTRW,	INCDEC-256,	16,	0xff08L},
{"decR",	RINST,	INCOPT-256,	8,	0x48L},
{"negb",	INSTRB,	BMONOP1-256,	16,	0xf618L},
{"neg",		INSTRW,	MONOP1-256,	16,	0xf718L},
{"notb",	INSTRB,	BMONOP1-256,	16,	0xf610L},
{"not",		INSTRW, MONOP1-256,	16,	0xf710L},
{"mulb",	INSTRB,	BMULDIV-256,	16,	0xf620L},
{"mul",		INSTRW,	MULDIV-256,	16,	0xf720L},
{"imulb",	INSTRB,	BMULDIV-256,	16,	0xf628L},
{"imul",	INSTRW,	MULDIV-256,	16,	0xf728L},
{"divb",	INSTRB,	BMULDIV-256,	16,	0xf630L},
{"div",		INSTRW,	MULDIV-256,	16,	0xf730L},
{"idivb",	INSTRB,	BMULDIV-256,	16,	0xf638L},
{"idiv",	INSTRW,	MULDIV-256,	16,	0xf738L},
{"shlb",	INSTRB,	BLOGIC1-256,	16,	0xd020L},
{"salb",	INSTRB,	BLOGIC1-256,	16,	0xd020L},
{"shl",		INSTRW,	LOGIC1-256,	16,	0xd120L},
{"sal",		INSTRW,	LOGIC1-256,	16,	0xd120L},
{"shrb",	INSTRB,	BLOGIC1-256,	16,	0xd028L},
{"shr",		INSTRW,	LOGIC1-256,	16,	0xd128L},
{"sarb",	INSTRB,	BLOGIC1-256,	16,	0xd038L},
{"sar",		INSTRW,	LOGIC1-256,	16,	0xd138L},
{"rolb",	INSTRB,	BLOGIC1-256,	16,	0xd000L},
{"rol",		INSTRW,	LOGIC1-256,	16,	0xd100L},
{"rorb",	INSTRB,	BLOGIC1-256,	16,	0xd008L},
{"ror",		INSTRW,	LOGIC1-256,	16,	0xd108L},
{"rclb",	INSTRB,	BLOGIC1-256,	16,	0xd010L},
{"rcl",		INSTRW,	LOGIC1-256,	16,	0xd110L},
{"rcrb",	INSTRB,	BLOGIC1-256,	16,	0xd018L},
{"rcr",		INSTRW,	LOGIC1-256,	16,	0xd118L},
{"call",	INSTRW,	CALLOP-256,	8,	0xe8L},
{"callIN",	ININST,	INDIRECT-256,	16,	0xff10L},
{"lcall",	INSTRW,	LCALLOP-256,	8,	0x9aL},
{"lcallIN",	ININST,	INDIRECT-256,	16,	0xff18L},
{"jmp",		INSTRW,	JMPOP2-256,	8,	0xe9L},
{"jmpIN",	ININST,	INDIRECT-256,	16,	0xff20L},
{"ljmp",	INSTRW,	LJMPOP-256,	8,	0xeaL},
{"ljmpIN",	ININST,	INDIRECT-256,	16,	0xff28L},
{"retE",	EINST,	EXPOPT-256,	8,	0xc2L},
{"lretE",	EINST,	EXPOPT-256,	8,	0xcaL},
{"je",		INSTRB,	JMPOP1-256,	8,	0x74L},
{"jz",		INSTRB,	JMPOP1-256,	8,	0x74L},
{"jl",		INSTRB,	JMPOP1-256,	8,	0x7cL},
{"jnge",	INSTRB,	JMPOP1-256,	8,	0x7cL},
{"jle",		INSTRB,	JMPOP1-256,	8,	0x7eL},
{"jng",		INSTRB,	JMPOP1-256,	8,	0x7eL},
{"jc",		INSTRB,	JMPOP1-256,	8,	0x72L},
{"jb",		INSTRB,	JMPOP1-256,	8,	0x72L},
{"jnae",	INSTRB,	JMPOP1-256,	8,	0x72L},
{"jbe",		INSTRB,	JMPOP1-256,	8,	0x76L},
{"jna",		INSTRB,	JMPOP1-256,	8,	0x76L},
{"jp",		INSTRB,	JMPOP1-256,	8,	0x7aL},
{"jpe",		INSTRB,	JMPOP1-256,	8,	0x7aL},
{"jo",		INSTRB,	JMPOP1-256,	8,	0x70L},
{"js",		INSTRB,	JMPOP1-256,	8,	0x78L},
{"jne",		INSTRB,	JMPOP1-256,	8,	0x75L},
{"jnz",		INSTRB,	JMPOP1-256,	8,	0x75L},
{"jnl",		INSTRB,	JMPOP1-256,	8,	0x7dL},
{"jge",		INSTRB,	JMPOP1-256,	8,	0x7dL},
{"jnle",	INSTRB,	JMPOP1-256,	8,	0x7fL},
{"jg",		INSTRB,	JMPOP1-256,	8,	0x7fL},
{"jnc",		INSTRB, JMPOP1-256,	8,	0x73L},
{"jnb",		INSTRB,	JMPOP1-256,	8,	0x73L},
{"jae",		INSTRB,	JMPOP1-256,	8,	0x73L},
{"jnbe",	INSTRB,	JMPOP1-256,	8,	0x77L},
{"ja",		INSTRB,	JMPOP1-256,	8,	0x77L},
{"jnp",		INSTRB,	JMPOP1-256,	8,	0x7bL},
{"jpo",		INSTRB,	JMPOP1-256,	8,	0x7bL},
{"jno",		INSTRB,	JMPOP1-256,	8,	0x71L},
{"jns",		INSTRB,	JMPOP1-256,	8,	0x79L},
{"loop",	INSTRB,	LOOP-256,	8,	0xe2L},
{"loopz",	INSTRB,	LOOP-256,	8,	0xe1L},
{"loope",	INSTRB,	LOOP-256,	8,	0xe1L},
{"loopnz",	INSTRB,	LOOP-256,	8,	0xe0L},
{"loopne",	INSTRB,	LOOP-256,	8,	0xe0L},
{"jcxz",	INSTRB,	LOOP-256,	8,	0xe3L},
{"intI",	EINST,	EXPOPT-256,	8,	0xccL},
{"esc",		INSTRW,	MONOP1-256,	16,	0xd800L},
{"movb",	INSTRB,	BMOVOP-256,	16,	0x8800L},
{"mov",		INSTRW,	MOVOP-256,	16,	0x8900L},
{"movbIG",	INSTRB,	IMMED-256,	16,	0xc600L},
{"movIG",	INSTRW,	IMMED-256,	16,	0xc700L},
{"movbIR",	INSTRB,	IMMED-256,	8,	0xb0L},
{"movIR",	INSTRW,	IMMED-256,	8,	0xb8L},
{"movbA",	INSTRB,	MOVOPT-256,	8,	0xa0L},
{"movA",	INSTRW,	MOVOPT-256,	8,	0xa1L},
{"movGS",	INSTRW,	SEGMEM-256,	16,	0x8e00L},
{"movSG",	INSTRW,	SEGMEM-256,	16,	0x8c00L},
{"xchgb",	INSTRB,	BXCHG-256,	16,	0x8600L},
{"xchg",	INSTRW,	XCHG-256,	16,	0x8700L},
{"lea",		INSTRW,	AOTOP-256,	16,	0x8d00L},
{"lds",		INSTRW,	AOTOP-256,	16,	0xc500L},
{"les",		INSTRW,	AOTOP-256,	16,	0xc400L},
{"addb",	INSTRB,	BDYADIC-256,	16,	0x0000L},
{"add",		INSTRW,	DYADIC-256,	16,	0x0100L},
{"addbIG",	INSTRB,	IMMED-256,	16,	0x8000L},
{"addIG",	INSTRW,	IMMED-256,	16,	0x8100L},
{"adcb",	INSTRB,	BDYADIC-256,	16,	0x1000L},
{"adc",		INSTRW,	DYADIC-256,	16,	0x1100L},
{"adcbIG",	INSTRB,	IMMED-256,	16,	0x8010L},
{"adcIG",	INSTRW,	IMMED-256,	16,	0x8110L},
{"subb",	INSTRB,	BDYADIC-256,	16,	0x2800L},
{"sub",		INSTRW,	DYADIC-256,	16,	0x2900L},
{"subbIG",	INSTRB,	IMMED-256,	16,	0x8028L},
{"subIG",	INSTRW,	IMMED-256,	16,	0x8128L},
{"sbbb",	INSTRB,	BDYADIC-256,	16,	0x1800L},
{"sbb",		INSTRW,	DYADIC-256,	16,	0x1900L},
{"sbbbIG",	INSTRB,	IMMED-256,	16,	0x8018L},
{"sbbIG",	INSTRW,	IMMED-256,	16,	0x8118L},
{"cmpb",	INSTRB,	BDYADIC-256,	16,	0x3800L},
{"cmp",		INSTRW,	DYADIC-256,	16,	0x3900L},
{"cmpbIG",	INSTRB,	IMMED-256,	16,	0x8038L},
{"cmpIG",	INSTRW,	IMMED-256,	16,	0x8138L},
{"andb",	INSTRB,	BDYADIC-256,	16,	0x2000L},
{"and",		INSTRW,	LOGIC2-256,	16,	0x2100L},
{"andbIG",	INSTRB,	IMMED-256,	16,	0x8020L},
{"andIG",	INSTRW,	IMMED-256,	16,	0x8120L},
{"testbS",	INSTRB,	DYADOPT-256,	16,	0x8400L},
{"testS",	INSTRW,	DYADOPT-256,	16,	0x8500L},
{"testb",	INSTRB,	BTEST-256,	16,	0x8400L},
{"test",	INSTRW,	TEST-256,	16,	0x8500L},
{"testbIG",	INSTRB,	IMMED-256,	16,	0xf600L},
{"testIG",	INSTRW,	IMMED-256,	16,	0xf700L},
{"orb",		INSTRB,	BDYADIC-256,	16,	0x0800L},
{"or",		INSTRW,	LOGIC2-256,	16,	0x0900L},
{"orbIG",	INSTRB,	IMMED-256,	16,	0x8008L},
{"orIG",	INSTRW,	IMMED-256,	16,	0x8108L},
{"xorb",	INSTRB,	BDYADIC-256,	16,	0x3000L},
{"xor",		INSTRW,	LOGIC2-256,	16,	0x3100L},
{"xorbIG",	INSTRB,	IMMED-256,	16,	0x8030L},
{"xorIG",	INSTRW,	IMMED-256,	16,	0x8130L},
{"ax",		GREG16,	AREG16-256,	3,	0x0L},
{"cx",		GREG16,	REG16-256,	3,	0x1L},
{"dx",		GREG16,	DREG16-256,	3,	0x2L},
{"bx",		BX,	BREG16-256,	3,	0x3L},
{"sp",		GREG16,	REG16-256,	3,	0x4L},
{"bp",		BP,	BREG16-256,	3,	0x5L},
{"si",		SI,	IREG16-256,	3,	0x6L},
{"di",		DI,	IREG16-256,	3,	0x7L},
{"al",		GREG8,	AREG8-256,	3,	0x0L},
{"cl",		GREG8,	CLREG8-256,	3,	0x1L},
{"dl",		GREG8,	REG8-256,	3,	0x2L},
{"bl",		GREG8,	REG8-256,	3,	0x3L},
{"ah",		GREG8,	REG8-256,	3,	0x4L},
{"ch",		GREG8,	REG8-256,	3,	0x5L},
{"dh",		GREG8,	REG8-256,	3,	0x6L},
{"bh",		GREG8,	REG8-256,	3,	0x7L},
{"es",		SEGREG,	SREG-256,	2,	0x0L},
{"cs",		SEGREG,	SREG-256,	2,	0x1L},
{"ss",		SEGREG,	SREG-256,	2,	0x2L},
{"ds",		SEGREG,	SREG-256,	2,	0x3L},
{".text",	TXT,	PSTEXT-256,	0,	0x0L},
{".data",	DAT,	PSDATA-256,	0,	0x0L},
{".bss",	BSS,	PSBSS-256,	0,	0x0L},
{".comm",	PSEUDO, PSCOMM-256,	0,	0x0L},
{".lcomm",	PSEUDO, PSLCOMM-256,	0,	0x0L},
{".globl",	PSEUDO,	PSGLOBAL-256,	0,	0x0L},
{".tv",		PSEUDO,	PSTV-256,	0,	0x0L},
{".set",	PSEUDO,	PSSET-256,	0,	0x0L},
{".even",	PSEUDO,	PSEVEN-256,	0,	0x0L},
{".byte",	PSEUDO,	PSBYTE-256,	0,	0x0L},
{".string",	PSEUDO,	PSSTRING-256,	0,	0x0L},
{".value",	PSEUDO,	PSVALUE-256,	0,	0x0L},
{".file",	PSEUDO,	PSFILE-256,	0,	0x0L},
{".def",	PSEUDO,	PSDEF-256,	0,	0x0L},
{".endef",	PSEUDO,	PSENDEF-256,	0,	0x0L},
{".val",	PSEUDO,	PSVAL-256,	0,	0x0L},
{".scl",	PSEUDO,	PSSCL-256,	0,	0x0L},
{".type",	PSEUDO,	PSTYPE-256,	0,	0x0L},
{".line",	PSEUDO,	PSLINE-256,	0,	0x0L},
{".size",	PSEUDO,	PSSIZE-256,	0,	0x0L},
{".tag",	PSEUDO,	PSTAG-256,	0,	0x0L},
{".ln",		PSEUDO,	PSLN-256,	0,	0x0L},
{".dim",	PSEUDO,	PSDIM-256,	0,	0x0L},
{".ident",	PSEUDO, PSIDENT-256,	0,	0x0L},
{".optim",	PSEUDO,	PSOPT-256,	0,	0x1L},
{".noopt",	PSEUDO,	PSOPT-256,	0,	0x0L},
{".jmpbeg",	PSEUDO, PSJMPTAB-256,	8,	0xf1L},
{".jmpend",	PSEUDO, PSJMPTAB-256,	16,	0xffffL},
/*
	special 186 op codes

	pusha, popa:	push/pop "all" registers
	pushI:		push a 16 bit quantity (push Immediate)
	enter/leave:	enter/leave a procedure
	sin/sout:	get/put a byte from/to a DX port
	bound:		check array bounds
	iimul:		multiply by a constant (integer immediate mult)

	Note:	all the logical instructions now have an optional
		shift/rotate by a count. No new op codes were reqd
*/
{"pusha",	INSTRW, NO_OP-256,	8,	0x60L},
{"popa",	INSTRW, NO_OP-256,	8,	0x61L},
{"pushI",	INSTRW, SPOPT-256,	8,	0x68L},
{"pushIB",	INSTRW, SPOPT-256,	8,	0x6aL},
{"enter",	INSTRW, ENTER-256,	8,	0xc8L},
{"leave",	INSTRW, NO_OP-256,	8,	0xc9L},
{"insb",	INSTRB,	BSTROP4-256,	8,	0x6cL},
{"ins",		INSTRW,	STROP4-256,	8,	0x6dL},
{"outsb",	INSTRB,	BSTROP3-256,	8,	0x6eL},
{"outs",	INSTRW,	STROP3-256,	8,	0x6fL},
{"bound",	INSTRW,	BOUND-256,	16,	0x6200L},
{"imulI",	INSTRW,	MULDIV-256,	16,	0x6900L},
/*

	286 instructions added........jws

*/
{"clts",	INSTRW, NO_OP-256,	16,	0x0f06},
{"lgdt",	INSTRW, LSDT-256,	24,	0x0f0110L},
{"sgdt",	INSTRW, LSDT-256,	24,	0x0f0100L},
{"lidt",	INSTRW, LSDT-256,	24,	0x0f0118L},
{"sidt",	INSTRW, LSDT-256,	24,	0x0f0108L},
{"lldt",	INSTRW, PROT1-256,	24,	0x0f0010L},
{"sldt",	INSTRW, PROT1-256,	24,	0x0f0000L},
{"ltr",		INSTRW, PROT1-256,	24,	0x0f0018L},
{"str",		INSTRW, PROT1-256,	24,	0x0f0008L},
{"lmsw",	INSTRW, PROT1-256,	24,	0x0f0130L},
{"smsw",	INSTRW, PROT1-256,	24,	0x0f0120L},
{"lar",		INSTRW, PROT2-256,	24,	0x0f0200L},
{"lsl",		INSTRW, PROT2-256,	24,	0x0f0300L},
{"arpl",	INSTRW, ARPL-256,	16,	0x6300L},
{"verr",	INSTRW, PROT1-256,	24,	0x0f0020L},
{"verw",	INSTRW, PROT1-256,	24,	0x0f0028L},
/* floating point instructions, register, and pseudo-ops  */
{"f2xm1",	INSTRW,	FLOAT1-256,	16,	0xd9f0L},
{"fabs",	INSTRW,	FLOAT1-256,	16,	0xd9e1L},
{"fchs",	INSTRW,	FLOAT1-256,	16,	0xd9e0L},
{"fclex",	INSTRW,	FLOAT1-256,	24,	0x9bdbe2L},
{"fcompp",	INSTRW,	FLOAT1-256,	16,	0xded9L},
{"fdecstp",	INSTRW,	FLOAT1-256,	16,	0xd9f6L},
{"fincstp",	INSTRW,	FLOAT1-256,	16,	0xd9f7L},
{"finit",	INSTRW,	FLOAT1-256,	24,	0x9bdbe3L},
{"fld1",	INSTRW,	FLOAT1-256,	16,	0xd9e8L},
{"fldl2e",	INSTRW,	FLOAT1-256,	16,	0xd9eaL},
{"fldl2t",	INSTRW,	FLOAT1-256,	16,	0xd9e9L},
{"fldlg2",	INSTRW,	FLOAT1-256,	16,	0xd9ecL},
{"fldln2",	INSTRW,	FLOAT1-256,	16,	0xd9edL},
{"fldpi",	INSTRW,	FLOAT1-256,	16,	0xd9ebL},
{"fldz",	INSTRW,	FLOAT1-256,	16,	0xd9eeL},
{"fnclex",	INSTRW,	FLOAT1-256,	16,	0xdbe2L},
{"fninit",	INSTRW,	FLOAT1-256,	16,	0xdbe3L},
{"fnop",	INSTRW,	FLOAT1-256,	16,	0xd9d0L},
{"fpatan",	INSTRW,	FLOAT1-256,	16,	0xd9f3L},
{"fprem",	INSTRW,	FLOAT1-256,	16,	0xd9f8L},
{"fptan",	INSTRW,	FLOAT1-256,	16,	0xd9f2L},
{"frndint",	INSTRW,	FLOAT1-256,	16,	0xd9fcL},
{"fscale",	INSTRW,	FLOAT1-256,	16,	0xd9fdL},
{"fsetpm",	INSTRW,	FLOAT1-256,	24,	0x9bdbe4L},
{"fsqrt",	INSTRW,	FLOAT1-256,	16,	0xd9faL},
{"ftst",	INSTRW,	FLOAT1-256,	16,	0xd9e4L},
{"fwait",	INSTRW,	FLOAT1-256,	8,	0x9bL},
{"fxam",	INSTRW,	FLOAT1-256,	16,	0xd9e5L},
{"fxtract",	INSTRW,	FLOAT1-256,	16,	0xd9f4L},
{"fyl2x",	INSTRW,	FLOAT1-256,	16,	0xd9f1L},
{"fyl2xp1",	INSTRW,	FLOAT1-256,	16,	0xd9f9L},
{"fldcw",	INSTRW,	FLOAT2-256,	16,	0xd928L},
{"fstcw",	INSTRW,	FLOAT2-256,	24,	0xd938L},
{"fnstcw",	INSTRW,	FLOAT2-256,	16,	0xd938L},
{"fstsw",	INSTRW,	FLOAT6-256,	24,	0xdd38L},
{"fnstsw",	INSTRW,	FLOAT6-256,	16,	0xdd38L},
{"fstenv",	INSTRW,	FLOAT2-256,	24,	0xd930L},
{"fnstenv",	INSTRW,	FLOAT2-256,	16,	0xd930L},
{"fldenv",	INSTRW,	FLOAT2-256,	16,	0xd920L},
{"fsave",	INSTRW,	FLOAT2-256,	24,	0xdd30L},
{"fnsave",	INSTRW,	FLOAT2-256,	16,	0xdd30L},
{"frstor",	INSTRW,	FLOAT2-256,	16,	0xdd20L},
{"fbld",	INSTRW,	FLOAT2-256,	16,	0xdf20L},
{"fbstp",	INSTRW,	FLOAT2-256,	16,	0xdf30L},
{"fiadd",	INSTRW, FLOAT2-256,	16,	0xde00L},
{"fiaddl",	INSTRW, FLOAT2-256,	16,	0xda00L},
{"ficom",	INSTRW, FLOAT2-256,	16,	0xde10L},
{"ficoml",	INSTRW, FLOAT2-256,	16,	0xda10L},
{"ficomp",	INSTRW, FLOAT2-256,	16,	0xde18L},
{"ficompl",	INSTRW, FLOAT2-256,	16,	0xda18L},
{"fidiv",	INSTRW, FLOAT2-256,	16,	0xde30L},
{"fidivl",	INSTRW, FLOAT2-256,	16,	0xda30L},
{"fidivr",	INSTRW, FLOAT2-256,	16,	0xde38L},
{"fidivrl",	INSTRW, FLOAT2-256,	16,	0xda38L},
{"fild",	INSTRW, FLOAT2-256,	16,	0xdf00L},
{"fildl",	INSTRW, FLOAT2-256,	16,	0xdb00L},
{"fildll",	INSTRW, FLOAT2-256,	16,	0xdf28L},
{"fimul",	INSTRW, FLOAT2-256,	16,	0xde08L},
{"fimull",	INSTRW, FLOAT2-256,	16,	0xda08L},
{"fist",	INSTRW, FLOAT2-256,	16,	0xdf10L},
{"fistl",	INSTRW, FLOAT2-256,	16,	0xdb10L},
{"fistp",	INSTRW, FLOAT2-256,	16,	0xdf18L},
{"fistpl",	INSTRW, FLOAT2-256,	16,	0xdb18L},
{"fistpll",	INSTRW, FLOAT2-256,	16,	0xdf38L},
{"fisub",	INSTRW, FLOAT2-256,	16,	0xde20L},
{"fisubl",	INSTRW, FLOAT2-256,	16,	0xda20L},
{"fisubr",	INSTRW, FLOAT2-256,	16,	0xde28L},
{"fisubrl",	INSTRW, FLOAT2-256,	16,	0xda28L},
{"fadd",	INSTRW,	FLOAT3-256,	16,	0xd8c0L},
{"fadds",	INSTRW,	FLOAT2-256,	16,	0xd800L},
{"faddl",	INSTRW,	FLOAT2-256,	16,	0xdc00L},
{"faddp",	INSTRW,	FLOAT5-256,	16,	0xdec0L},
{"fcom",	INSTRW,	FLOAT7-256,	16,	0xd8d0L},
{"fcoms",	INSTRW,	FLOAT2-256,	16,	0xd810L},
{"fcoml",	INSTRW,	FLOAT2-256,	16,	0xdc10L},
{"fcomp",	INSTRW,	FLOAT7-256,	16,	0xd8d8L},
{"fcomps",	INSTRW,	FLOAT2-256,	16,	0xd818L},
{"fcompl",	INSTRW,	FLOAT2-256,	16,	0xdc18L},
{"fdiv",	INSTRW,	FLOAT3-256,	16,	0xd8f0L},
{"fdivs",	INSTRW,	FLOAT2-256,	16,	0xd830L},
{"fdivl",	INSTRW,	FLOAT2-256,	16,	0xdc30L},
{"fdivp",	INSTRW,	FLOAT5-256,	16,	0xdef0L},
{"fdivr",	INSTRW,	FLOAT3-256,	16,	0xd8f8L},
{"fdivrs",	INSTRW,	FLOAT2-256,	16,	0xd838L},
{"fdivrl",	INSTRW,	FLOAT2-256,	16,	0xdc38L},
{"fdivrp",	INSTRW,	FLOAT5-256,	16,	0xdef8L},
{"ffree",	INSTRW,	FLOAT4-256,	16,	0xddc0L},
{"fld",		INSTRW,	FLOAT4-256,	16,	0xd9c0L},
{"flds",	INSTRW,	FLOAT2-256,	16,	0xd900L},
{"fldl",	INSTRW,	FLOAT2-256,	16,	0xdd00L},
{"fldt",	INSTRW,	FLOAT2-256,	16,	0xdb28L},
{"fmul",	INSTRW,	FLOAT3-256,	16,	0xd8c8L},
{"fmuls",	INSTRW,	FLOAT2-256,	16,	0xd808L},
{"fmull",	INSTRW,	FLOAT2-256,	16,	0xdc08L},
{"fmulp",	INSTRW,	FLOAT5-256,	16,	0xdec8L},
{"fst",		INSTRW,	FLOAT4-256,	16,	0xddd0L},
{"fsts",	INSTRW,	FLOAT2-256,	16,	0xd910L},
{"fstl",	INSTRW,	FLOAT2-256,	16,	0xdd10L},
{"fstp",	INSTRW,	FLOAT4-256,	16,	0xddd8L},
{"fstps",	INSTRW,	FLOAT2-256,	16,	0xd918L},
{"fstpl",	INSTRW,	FLOAT2-256,	16,	0xdd18L},
{"fstpt",	INSTRW,	FLOAT2-256,	16,	0xdb38L},
{"fsub",	INSTRW,	FLOAT3-256,	16,	0xd8e0L},
{"fsubs",	INSTRW,	FLOAT2-256,	16,	0xd820L},
{"fsubl",	INSTRW,	FLOAT2-256,	16,	0xdc20L},
{"fsubp",	INSTRW,	FLOAT5-256,	16,	0xdee0L},
{"fsubr",	INSTRW,	FLOAT3-256,	16,	0xd8e8L},
{"fsubrs",	INSTRW,	FLOAT2-256,	16,	0xd828L},
{"fsubrl",	INSTRW,	FLOAT2-256,	16,	0xdc28L},
{"fsubrp",	INSTRW,	FLOAT5-256,	16,	0xdee8L},
{"fxch",	INSTRW,	FLOAT7-256,	16,	0xd9c8L},
{"st",		FSTACK, FREG-256,	3,	0x0L},
{".long",	PSEUDO,	PSLONG-256,	0,	0x0L},
{".llong",	PSEUDO,	PSLLONG-256,	0,	0x0L},
{".float",	PSEUDO,	PSFLOAT-256,	0,	0x0L},
{".double",	PSEUDO,	PSDOUBLE-256,	0,	0x0L},
{".temp",	PSEUDO,	PSTEMP-256,	0,	0x0L},
{".bcd",	PSEUDO,	PSBCD-256,	0,	0x0L},
